generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id           String         @unique @default(uuid())
  name         String
  email        String         @unique
  password     String
  questions    Question[]
  role         UserRole       @default(STUDENT)
  answers      Answer[]
  comments     Comment[]
  notification Notification[]

  @@map("users")
}

model Question {
  id           String    @unique @default(uuid())
  title        String
  content      String
  slug         String    @unique
  createdAt    DateTime  @default(now()) @map("created_at")
  updateAt     DateTime? @updatedAt() @map("update_at")
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")
  answers      Answer[]
  comments     Comment[]

  author      User         @relation(fields: [authorId], references: [id])
  bestAnswer  Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updateAt   DateTime? @updatedAt() @map("update_at")
  authorId   String    @map("author_id")
  questionId String    @map("question_id")
  comments   Comment[]

  author       User         @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  question     Question?    @relation(fields: [questionId], references: [id])
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updateAt   DateTime? @updatedAt() @map("update_at")

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Notification {
  id        String    @id @default(uuid())
  receiptId String    @map("receipt_id")
  title     String
  content   String
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [receiptId], references: [id])

  @@map("notifications")
}
